body{color:#fff}.button{position:relative;border:solid 1px !important}.button.special{border:none !important}.icon.major{-ms-behavior:url("assets/js/ie/PIE.htc")}.icon.major:before{font-size:4em;border:0}.spotlight .image{position:relative;-ms-behavior:url("assets/js/ie/PIE.htc")}.spotlight .image img{position:relative;-ms-behavior:url("assets/js/ie/PIE.htc")}.features li{width:29%}#footer>*{width:50%;margin-left:0}#main>.main>.image.main:first-child{margin-top:0;margin-left:0;width:100%}

/*# sourceMappingURL=data:application/json;base64, */
